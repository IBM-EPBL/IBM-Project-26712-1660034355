{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3d5c38f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from flask import Flask,render_template,Response,request\n",
    "import pickle\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "import pickle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c460b8af",
   "metadata": {},
   "outputs": [],
   "source": [
    "app=Flask(__name__)\n",
    "filename= 'resale_model.sav'\n",
    "model_rand = pickle.load(open(filename,'rb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e9e3ce01",
   "metadata": {},
   "outputs": [],
   "source": [
    "@app.route('/')\n",
    "def index():\n",
    "    return render_template('resaleintro.html')\n",
    "@app.route('/predict')\n",
    "def predict():\n",
    "    return render_template('resalepredict.html')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d822db2c",
   "metadata": {},
   "outputs": [],
   "source": [
    "@app.route('/y_predict',methods=['GET','POST'])\n",
    "def y_predict():\n",
    "    regyear = int(request.form['regyear'])\n",
    "    powerps =float(request.form['powerps'])\n",
    "    kms= float(request.form['kms'])\n",
    "    regmonth = int(request.form.get('regmonth'))\n",
    "    gearbox = request.form['gearbox']\n",
    "    damage =request.form['dam']\n",
    "    model = request.form.get('modeltype')\n",
    "    brand = request.form.get('brand')\n",
    "    fuelType = request.form.get('fuel')\n",
    "    vehicletype = request.form.get('vehicletype')\n",
    "    new_row = {'yearOfRegistration':regyear,'powerPs':powerps,'kilometer':kms,'monthOfRegistration':regmonth, 'gearbox':gearbox, 'notRepairedDamage':damage, 'model':model, 'brand':brand, 'fuelType':fuelType, 'vehicleType':vehicletype}\n",
    "    print(new_row)\n",
    "    new_df = pd.DataFrame(columns =['vehicleType','yearOfRegistration', 'gearbox', 'powerPs', 'model', 'kilometer', 'monthOfRegistration', 'fuleType', 'brand', 'notRepairedDamage'])\n",
    "    new_df = new_df.append(new_row,ignore_index = True)\n",
    "    labels = ['gearbox','notRepairedDamage','model','brand','fuelType','vehicleType']\n",
    "    mapper={}\n",
    "    for i in labels:\n",
    "        mapper[i]=LabelEncoder()\n",
    "        mapper[i].classes_=np.load(str('classes'+i+'.npy'))\n",
    "        tr=mapper[i].fit_transform(new_df[i])\n",
    "        new_df.loc[:, i +'labels'] = pd.Series(tr, index = new_df.index)\n",
    "    labeled = new_df[['yearOfRegistration','powerPs','kilometer','monthOfRegistrstion']+[x+'_labels' for x in labels]]\n",
    "    x=labeled.values\n",
    "    print(x)\n",
    "    y_prediction = model_rand.predict(x)\n",
    "    print(y_prediction)\n",
    "    return render_template('resalepredict.html',ypred = 'The resale value predicted is {:.2f}$'.format(y_prediction[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7ae23753",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * Serving Flask app \"__main__\" (lazy loading)\n",
      " * Environment: production\n",
      "\u001b[31m   WARNING: This is a development server. Do not use it in a production deployment.\u001b[0m\n",
      "\u001b[2m   Use a production WSGI server instead.\u001b[0m\n",
      " * Debug mode: on\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " * Restarting with watchdog (windowsapi)\n"
     ]
    },
    {
     "ename": "SystemExit",
     "evalue": "1",
     "output_type": "error",
     "traceback": [
      "An exception has occurred, use %tb to see the full traceback.\n",
      "\u001b[1;31mSystemExit\u001b[0m\u001b[1;31m:\u001b[0m 1\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Swetha\\anaconda3\\lib\\site-packages\\IPython\\core\\interactiveshell.py:3452: UserWarning: To exit: use 'exit', 'quit', or Ctrl-D.\n",
      "  warn(\"To exit: use 'exit', 'quit', or Ctrl-D.\", stacklevel=1)\n"
     ]
    }
   ],
   "source": [
    "if __name__ == '__main__' :\n",
    "    app.run(host='localhost',debug=True,threaded=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cb4ca649",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
